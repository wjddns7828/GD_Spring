<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.min.edu</groupId>
	<artifactId>SpringExam</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringExam Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<properties>
		<java-version>17</java-version>
		<org.springframework-version>5.3.20</org.springframework-version>
		<org.aspectj-version>1.9.9.1</org.aspectj-version>
		<org.slf4j-version>2.0.3</org.slf4j-version>
	</properties>
	<dependencies>
			<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>${org.springframework-version}</version>
		<exclusions>
			<!-- 
				dependency를 해서 의존관계를 통해 필요한 라이브러리를 묶음으로 가지고 옴 
				필요하지 않는 라이브러리를 제외하고 가지고 옴
			-->
			<exclusion>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
			 </exclusion>
		</exclusions>
	</dependency>
	<!-- 
		Spring MVC를 통해서 MVC의 호출이 가능하도록
		<mvc: ~> (annotation)
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc</artifactId>
		<version>${org.springframework-version}</version>
	</dependency>
			
	<!-- 로그처리를 위한 라이브러리 log4j를 향상시켜서 만든 라이브러리 : log4j.xml를 사용 -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-api</artifactId>
		<version>${org.slf4j-version}</version>
	</dependency>
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>jcl-over-slf4j</artifactId>
		<version>${org.slf4j-version}</version>
		<scope>runtime</scope>
	</dependency>
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>${org.slf4j-version}</version>
		<scope>runtime</scope>
	</dependency>
	
	<!-- slf4j는 log4j의 라이브러리가 필요 -->
	<dependency>
		<groupId>log4j</groupId>
		<artifactId>log4j</artifactId>
		<version>1.2.17</version>
		<exclusions>
			<exclusion>
				<groupId>javax.mail</groupId>
				<artifactId>mail</artifactId>
			</exclusion>
			<exclusion>
				<groupId>javax.jms</groupId>
				<artifactId>jms</artifactId>
			</exclusion>
			<exclusion>
				<groupId>com.sun.jdmk</groupId>
				<artifactId>jmxtools</artifactId>
			</exclusion>
			<exclusion>
				<groupId>com.sun.jmx</groupId>
				<artifactId>jmxri</artifactId>
			</exclusion>
		</exclusions>
		<scope>runtime</scope>
	</dependency>

	<!-- 생성된 bean을 DI할 때 사용할 수 있는 @Inject을 사용할 때 선언해줘야 하는 라이브러리 -->
	<dependency>
		<groupId>javax.inject</groupId>
		<artifactId>javax.inject</artifactId>
		<version>1</version>
	</dependency>
			
	<!-- Servlet은 tomcat이 가지고 있는 라이브러리인 scope를 provide로 하여 실행 할 때는 maven을 사용하고 배포했을 때는 provieded된 배포서버를 사용-->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>servlet-api</artifactId>
		<version>2.5</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>jsp-api</artifactId>
		<version>2.1</version>
		<scope>provided</scope>
	</dependency>
	
	<!-- jstl 사용 라이브러리 -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
	</dependency>
	
	<!-- 문자열 처리를 쉽게 하기 위한 라이브러리 guava.jar, commons-lang3.jar -->
	<dependency>
	    <groupId>org.apache.commons</groupId>
	    <artifactId>commons-lang3</artifactId>
	    <version>3.13.0</version>
	</dependency>
	
	<!-- oracle 접속을 위한 driver ojdbc10 : oracle 21c -->
	<dependency>
	    <groupId>com.oracle.database.jdbc</groupId>
	    <artifactId>ojdbc10</artifactId>
	    <version>19.18.0.0</version>
	</dependency>
	
	<!--myBatis 라이브러리 -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.5.9</version>
	</dependency>
	
	<!-- 
		디비 접속 정보 파일인 properties 파일을 bean으로 생성하기 위한 라이브러리 
		-> dbcp database connection property	
	-->
	<dependency>
	    <groupId>commons-dbcp</groupId>
	    <artifactId>commons-dbcp</artifactId>
	    <version>1.4</version>
	</dependency>
	
	<!--Spring에서 mybatis 객체를 bean으로 만들어서 DI를 할 bean을 만들어 주는 라이브러리 -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>2.0.6</version>
	</dependency>

	<!-- TX(트랜잭션)을 처리하기 위한 라이브러리 : 제어역전 -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-orm</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>

	<!-- DTO/VO에 자동으로 getter, setter 및 생성자 등을 자동 구성해줌 -->
	<dependency>
	    <groupId>org.projectlombok</groupId>
	    <artifactId>lombok</artifactId>
	    <version>1.18.24</version>
	</dependency>

	<!-- AOP 처리를 위한 aspect 라이브러리 추가-->
	<dependency>
	    <groupId>org.aspectj</groupId>
	    <artifactId>aspectjrt</artifactId>
	    <version>${org.aspectj-version}</version>
	</dependency>
	
	<dependency>
	    <groupId>org.aspectj</groupId>
	    <artifactId>aspectjweaver</artifactId>
		<version>${org.aspectj-version}</version>
	</dependency>

	<!-- TDD 테스트 주도형 개발에서 필요한 단위 테스트 도구 Test -->
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.12</version>
	</dependency>

	<!--Spring bean configuration을 읽어서 JUnit Test를 할 수 있도록 해줌 -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>
	</dependencies>
	<build>
		<finalName>SpringExam</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.10.1</version>
				<configuration>
					<source>17</source>
					<target>17</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.3.2</version>
			</plugin>
		</plugins>
	</build>
</project>